kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test

bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic Hello-Kafka

bin/kafka-topics.sh --list --bootstrap-server localhost:9092

bin/kafka-console-producer.sh --broker-list localhost:9092 --topic Hello-Kafka

bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic Hello-Kafka --from-beginning

bin/kafka-server-start.sh config/server.properties

javac -cp �/home/neelamtopno/Softwares/kafka_2.12-2.3.1/libs/*� *.java

java -cp �~/Softwares/kafka_2.12-2.3.1/libs/*�:. SimpleProducer Hello-Kafka

----------------------------------------------------------------------------
GIT COMMANDS

1. Initilizing repo

	git init 

	git config --global user.email "neilgp6555@gmail.com"

	git config --global user.name "Neelam-Topno20"


	git remote set-url origin https://github.com/Neelam-Topno20/DemoJSessionId.git


	git remote add origin https://github.com/Neelam-Topno20/kafka.git

	git remote -v

2. Pushing changes to remote

	git push origin master

	git diff HEAD

3. Staging unstaged files

	git status

	git add -A stages all changes
	git add . stages new files and modifications, without deletions

	git add -u stages modifications and deletions, without new files

	git diff --cached

4. Commiting changes to local

	git commit -m "added help file"

5. Creating and pushing a new branch

	git checkout -b branch_name

	git push -u origin feature_eclipse_link
 
 6. Stashing the changes from a repo for future
 
	git stash save

7. Modifying a file and viewing the changes

	# make a change
	echo branch2 content >> file.txt

	#view file
	cat file.txt

	# retrieve the stashed changes and apply them over the fresh orignal
	# branch checkout
	$ git stash pop


8. perform a checkout of all files to fetch files as we left them in
in the original branch
	$ git checkout .

9. view all the branches in local

	$ git branch

10. Deleting a branch in remote

	git push --delete origin branch_name

11. fetch all the changes in local

	git fetch origin --prune 
	git checkout -b feature_embedded_tomcat

	git push origin feature_embedded_tomcat

12. Deleting unstaged files

	# Print out the list of files which will be removed (dry run)
	git clean -n

	# Delete the files from the repository
	git clean -f


----------------------------------

sudo systemctl enable cassandra
sudo systemctl enable cassandra

CREATE KEYSPACE talentica WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
use talentica;
CREATE TABLE emp(
   emp_id int PRIMARY KEY,
   emp_name text,
   emp_city text,
   emp_sal varint,
   emp_phone varint
   );

select * from emp;

INSERT INTO emp (emp_id, emp_name, emp_city,
   emp_phone, emp_sal) VALUES(1,'Neelam', 'Pune', 9123100545, 5000000);

CREATE TABLE wordcount(
   word_id int PRIMARY KEY,
   word text ,
   count int
   );

INSERT INTO wordcount(word_id,word,count) VALUES();

<!--  <persistence-unit name="JPA-PU" transaction-type="RESOURCE_LOCAL">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
                <properties>
                        <property name="javax.persistence.jdbc.url" value="jdbc:oracle:thin:@localhost:1521:XE" />
                        <property name="javax.persistence.jdbc.user" value="system" />
                        <property name="javax.persistence.jdbc.password" value="system" />
                        <property name="javax.persistence.jdbc.driver" value="oracle.jdbc.driver.OracleDriver" />
                        <property name="hibernate.hbm2ddl.auto" value="update"/>
                        <property name="hibernate.show_sql" value="true"/>
                        <property name="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect"/>
                </properties>
        </persistence-unit> -->
        
        <!-- <persistence-unit name="h2-eclipselink" transaction-type="RESOURCE_LOCAL">
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
        <class>com.vogella.jpa.model.Todo</class>
        <properties>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:~/h2db/vogellaDB" />
            <property name="javax.persistence.jdbc.user" value="sa" />
            <property name="eclipselink.ddl-generation" value="create-or-extend-tables" />
            <property name="eclipselink.ddl-generation.output-mode" value="database" />
            <property name="eclipselink.logging.level" value="FINE" />
        </properties>
    </persistence-unit> -->